#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific bootstrap script, sourced from main.sh, and as such
# has access to all of the variables set by main.sh, namely $tmp (the temporary
# directory), $INSTALLERDIR/$DISTRO, $RELEASE, $ARCH, and $MIRROR.

  # Grab the latest release of debootstrap
  #echo 'Downloading latest debootstrap...' 1>&2
  #d='http://anonscm.debian.org/gitweb/?p=d-i/debootstrap.git;a=snapshot;h=HEAD;sf=tgz'
  #if ! wget -O- --no-verbose --timeout=60 -t2 "$d" \
  #        | tar -C "$tmp" --strip-components=1 -zx 2>/dev/null; then
  #    echo 'Download from Debian gitweb failed. Trying latest release...' 1>&2
  #    d='http://ftp.debian.org/debian/pool/main/d/debootstrap/'
  #    f="`wget -O- --no-verbose --timeout=60 -t2 "$d" \
  #            | sed -ne 's ^.*\(debootstrap_[0-9.]*.tar.gz\).*$ \1 p' \
  #            | tail -n 1`"
  #    if [ -z "$f" ]; then
  #        error 1 'Failed to download debootstrap.
  #Check your internet connection or proxy settings and try again.'
  #    fi
  #    v="${f#*_}"
  #    v="${v%.tar.gz}"
  #    echo "Downloading debootstrap version $v..." 1>&2
  #    if ! wget -O- --no-verbose --timeout=60 -t2 "$d$f" \
  #            | tar -C "$tmp" --strip-components=1 -zx 2>/dev/null; then
  #        error 1 'Failed to download debootstrap.'
  #    fi
  #fi

# Grab latest package listings: 
echo 'Downloading mirror package listing: synthesis.hdlist.cz'
wget "$MIRROR"/../media_info/synthesis.hdlist.cz -O "$tmp"/synthesis.hdlist.cz
# eg: wget http://ftp.aarnet.edu.au/pub/mageia/distrib/3/x86_64/media/core/release/media_info/synthesis.hdlist.cz  -O $tmp/synthesis.hdlist.cz

# Decompress package listing: 
echo 'Decompressing synthesis.hdlist.cz' 
gunzip -dvS.cz "$tmp"/synthesis.hdlist.cz

# Create readable list of all package names: Saved as mirrorrpmlist.txt
echo 'Creating list of packages on mirror in /release'
awk -F "@" '/@info@/ { print $3 }' "$tmp"/synthesis.hdlist > "$tmp"/mirrorrpmlist.txt

#Add path so scripts in $tmp can be called without full path name
newpath="$PATH:$tmp"

# Add the necessary debootstrap executables and packages required list
cp "$INSTALLERDIR/$DISTRO/bash_rpm_cpio.sh" "$INSTALLERDIR/$DISTRO/bash_cpio.sh" "$INSTALLERDIR/$DISTRO/mageia3_rpms_req.txt" "$tmp/"
chmod 755 "$tmp/bash_rpm_cpio.sh" "$tmp/bash_cpio.sh"

# Determine packages full names including version: Then gather packages for chroot environment
echo 'Downloading packages required for bootstrap'
while read -r name;
do
#  printf 'Pattern: %q\nPackage name and version: %q\n' "$name" "$wgetvar"
  if wgetvar=$(grep -E "^$name"-[0-9] "$tmp"/mirrorrpmlist.txt); then
  wget "$MIRROR"/"$wgetvar".rpm -P "$tmp"
  # if [[ $wgetvar ]]
  # then
  # wget "$MIRROR"/"$wgetvar".rpm -P "$tmp"
  # fi
  #if [[ "$wgetvar" ==  ]]; then
  #echo 'This package required only for x86: Not attempting download'
  #else 
  #echo 'Package name and version :' "$wgetvar"
  #echo 'Downloading package'
  #wget "$MIRROR/../${wgetvar}.rpm" -P "$tmp"
  fi
done < "$tmp"/mageia3_rpms_req.txt

#Announce all packages downloaded
echo 'All packages on local system for simple chroot'
ls "$tmp"/*.rpm

(
# Now in sub shell
# All scripts and packages are now in $tmp: cd into $tmp/$subdir to create chroot filesystem and extract packages via scripts
cd "$tmp/$subdir"

#filesystem*.rpm package must be extracted first, or bootstrap filesystem will not suit the RPM package manager
echo 'creating Mageia ready filesystem'
bash_rpm_cpio.sh "$tmp"/filesystem.rpm | bash_cpio.sh -idmv

# /dev is not created by filesystem.rpm: create /dev manually
mkdir /"$tmp/$subdir"/dev

# extraction of packages into chroot filesystem:
echo 'Extracting packages into created file system'
find . -type f -name "$tmp"/"*".rpm | xargs -n1 -ifile sh -c "bash_rpm_cpio.sh file | bash_cpio.sh -idv"
)
